// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum DeliverStatus {
  YET_TO_SHIPPED
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  role         Role     @default(USER)
  cart         Cart[]
  orderHistory Order[]
  Review       Review[]
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String?
  stock       Int
  price       Int
  images      String[]
  reviews     Review[]
  Category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  String?
  carts       CartProduct[]
  OrderItem   OrderItem[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Cart {
  id           String        @id @default(uuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  cartProducts CartProduct[]
}

model CartProduct {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id])
  cart      Cart    @relation(fields: [cartId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  Address       String
  pinCode       String
  orderItems    OrderItem[]
  paymentStatus PaymentStatus
  delivered     DeliverStatus
  Payment       Payment?
}

model OrderItem {
  id        String  @id @default(uuid())
  order     String
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String?
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  content   String?
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id         String        @id @default(uuid())
  orderId    String        @unique
  order      Order         @relation(fields: [orderId], references: [id])
  amount     Int
  status     PaymentStatus
  paymentId  String?
  invoiceId  String?
  invoiceUrl String?
  createdAt  DateTime      @default(now())
}
